package com.nguyenhuuhongphuc.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.nguyenhuuhongphuc.bean.Product;
import com.nguyenhuuhongphuc.bean.ProductType;
import com.nguyenhuuhongphuc.bean.Staff;
import com.nguyenhuuhongphuc.bean.StaffType;
import com.nguyenhuuhongphuc.bean.Supplier;
import com.nguyenhuuhongphuc.service.InventoryService;
import com.nguyenhuuhongphuc.service.SupplierService;

@Controller
public class InventoryController {

	@Autowired
	InventoryService inventoryService;

	@Autowired
	SupplierService supplierService;

	@RequestMapping("inventory")
	public String showInventory(Model model) {

		List<Product> productList = inventoryService.getInventory();
		model.addAttribute("productList", productList);

		for (Product product : productList) {
			System.out.println("String: " + product.getId() + " *** " + product.getProductName() + " *** "
					+ product.getIdProductType() + " *** " + product.getIdSupplier() + " *** " + product.getPrice()
					+ " *** " + product.getStock());
		}

		List<ProductType> productTypeList = inventoryService.getProductType();
		model.addAttribute("productTypeList", productTypeList);

		List<Supplier> supplierList = supplierService.getSupplier();
		model.addAttribute("supplierList", supplierList);

		/*
		 * List<ProductInventory> productInventoryList =
		 * productInventoryService.getProductInventory();
		 * model.addAttribute("productInventoryList", productInventoryList);
		 */

		return "admin/Inventory";
	}

	@RequestMapping("inventorysearch")
	public String showInventorySearch(Model model,
			@RequestParam("searchInventoryString") String searchInventoryString) {

		List<Product> productList = inventoryService.getInventorySearch(searchInventoryString);
		model.addAttribute("productList", productList);

		// -------

		List<ProductType> productTypeList = inventoryService.getProductType();
		model.addAttribute("productTypeList", productTypeList);

		List<Supplier> supplierList = supplierService.getSupplier();
		model.addAttribute("supplierList", supplierList);

		/*
		 * List<ProductInventory> productInventoryList =
		 * productInventoryService.getProductInventory();
		 * model.addAttribute("productInventoryList", productInventoryList);
		 */

		return "admin/Inventory";
	}

	@RequestMapping("inventorysearchbyattribute")
	public String showInventoryByAttribute(Model model,
			@RequestParam("inventoryProductTypeClicked") String inventoryProductTypeClicked,
			@RequestParam("inventorySupplierClicked") String inventorySupplierClicked) {

		List<Product> productList = inventoryService.getInventoryByAttribute(
				Integer.parseInt(inventoryProductTypeClicked), Integer.parseInt(inventorySupplierClicked));
		model.addAttribute("productList", productList);
		// -------

		List<ProductType> productTypeList = inventoryService.getProductType();
		model.addAttribute("productTypeList", productTypeList);

		List<Supplier> supplierList = supplierService.getSupplier();
		model.addAttribute("supplierList", supplierList);

		/*
		 * List<ProductInventory> productInventoryList =
		 * productInventoryService.getProductInventory();
		 * model.addAttribute("productInventoryList", productInventoryList);
		 */

		return "admin/Inventory";
	}

	@RequestMapping("productcreateform")
	public String showPproductCreateForm(Model model) {
		List<ProductType> productTypeList = inventoryService.getProductType();
		model.addAttribute("productTypeList", productTypeList);
		model.addAttribute("product", new Product());
		return "admin/InventoryCreate";
	}

	@PostMapping("productcreate")
	public String processStaffCreate(Model model, @ModelAttribute("product") Product product,
			@RequestParam("productTypeClicked") String productTypeClicked) {
		int idProductType = Integer.parseInt(productTypeClicked);
		product.setIdProductType(idProductType);
		inventoryService.createProduct(product);

		return "redirect:/inventory";

	}

	@GetMapping(value = "productupdateform")
	public String showProductUpdate(@RequestParam("id") int id, Model model) {
		// System.out.println("update: "+id);
		List<Product> productById = inventoryService.getProductById(id);
		List<ProductType> productTypeList = inventoryService.getProductType();
		model.addAttribute("productList", productById);
		model.addAttribute("productTypeList", productTypeList);
		model.addAttribute("productupdate", new Product());
		return "admin/InventoryUpdate";
	}

	@PostMapping("processupdateproduct")
	public String processUpdateProduct(Model model, @ModelAttribute("productupdate") Product product,
			@RequestParam("productTypeClicked") String productTypeClicked) {
		product.setIdProductType(Integer.parseInt(productTypeClicked));
		inventoryService.updateProduct(product);
		return "redirect:/inventory"; // staff

	}
	
	@GetMapping(value = "productdelete")
	public String deleteProduct(@RequestParam("id") int id) {
		//System.out.println("delete: "+id);
		
		List<Product> productList = inventoryService.getProductById(id);
		Staff staff = new Staff();
		for (Staff stafflist : staffList) {
			staff.setUserName(stafflist.getUserName());
		}
		//System.out.println("getUsername: "+staff.getUserName());
		staffService.deleteStaff(id);
		accountService.deleteAccountThroughDeleteStaff(staff.getUserName());
		return "redirect:/stafflist";
	}

}
